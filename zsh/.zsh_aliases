alias k=jc
alias gitroot='cd "$(git rev-parse --show-toplevel)"'
alias gr=gitroot
alias vim=nvim
alias v=nvim
alias vimdiff='nvim -d'
alias view="vim -R -n +'set nomodifiable noswapfile noundofile shadafile= viewoptions=cursor' +'nnoremap q ZQ'"

function e {
    emacsclient "$@" & disown
}

alias ew='emacs -nw'

alias ls='ls -q --color=auto'
alias ll='ls -lh'
alias la='ls -A'
alias lla='la -Alh'
alias l='ls -C'
alias lr='ls -lAht'
alias lrr='lr | head'
alias lsd='ls -ld'
alias '..'='cd ..'
alias '...'='cd ../..'
alias '....'='cd ../../..'
alias '.....'='cd ../../../..'
alias '......'='cd ../../../../..'
alias '.......'='cd ../../../../../..'
alias '........'='cd ../../../../../../..'
alias mv='mv -iv'
alias mkdir='mkdir -pv'
alias md=mkdir
#alias rm='rm -Iv --one-file-system'
alias rm='trash'
alias rmback='trash *~'
alias cp='cp --reflink=auto -iv'
alias d='dirs -v'

alias grep='grep -i --color=auto'
alias diff='diff --color=auto'
alias wdiff='\dwdiff --color'
alias chardiff='git diff --no-index --word-diff=color --word-diff-regex=.'
alias dwdiff='wdiff'
alias g='git'
alias gg='git grep -i --break --heading --no-index'
alias rg='rg --smart-case --hidden --no-ignore'
alias fd='\fd --follow --full-path --hidden --no-ignore --show-errors'

alias encrypt_gpg='gpg --symmetric'

function decrypt_gpg() {
    local arg
    for arg; do
        echo "running gpg --output ${arg%.*} --decrypt $arg"
        gpg --output "${arg%.*}" --decrypt "$arg"
    done
}

alias c='less -iFX'

# Allows to follow a pipe (given by `$1`) to be followed by `less`.
# Directly piping into `less` kind of works but the following cannot be resumed
# using the `F` command after an interrupt.
function less_pipe() {
    local tempfile=$(mktemp /tmp/.less_pipe.XXXX)
    local pipe_command=$1
    (eval "$pipe_command" > $tempfile) &
    local subshell_pid=$!
    \less --RAW-CONTROL-CHARS --chop-long-lines -n +F -- $tempfile
    \kill -- "-${subshell_pid}" # kill subshell process group
    \rm -v -- "$tempfile"
}

# In the following aliases, the following of the pipe can be stopped with `^C`
# to be able to scroll/search the buffer in `less`. The following of the pipe
# can be continued using the `F` command of `less`.
alias lessmesg="less_pipe 'dmesg --follow --time-format ctime --color=always --nopager'"
alias lessjournal="less_pipe 'journalctl --boot 0 --follow --no-tail | ccze --raw-ansi'"

alias -g wl='wc -l'

alias hcat="highlight --force -O ansi"

alias g++="g++ -Wall -Wextra -std=c++11"
alias gcc="gcc -Wall -Wextra -std=c99"
alias pk-cc="gcc -std=c99 -g -Wall -Wextra -Wpedantic -Wbad-function-cast \
    -Wconversion -Wwrite-strings -Wstrict-prototypes"

alias yt='youtube-dl --add-metadata -ic'
alias yta='youtube-dl --add-metadata -xic'

function paru {
    PKGEXT=.pkg.tar command paru --sudoloop --newsonupgrade --review \
        --upgrademenu --fm ranger --nouseask --combinedupgrade --provides "$@"
    sudo pacdiff
}

function update {
    paru -Syu
    sudo pacdiff
}
alias yay=update

alias mpva='mpv --no-video'

# stolen from the examples directory of the ranger project
# (https://github.com/ranger/ranger/blob/master/examples/shell_automatic_cd.sh)
#
# make the shell switch to the directory that ranger was in when you exited it
function ranger_cd() {
    local chosen_dir temp_file
    temp_file="$(\mktemp "/tmp/.ranger_cd.XXXXXXXXXX")"
    command ranger --choosedir="$temp_file" -- "${@:-$PWD}"
    if chosen_dir="$(\cat -- "$temp_file")" && [ -n "$chosen_dir" ] && \
        [ "$chosen_dir" != "$PWD" ]; then
        builtin cd -- "$chosen_dir" || echo 'cd failed'
    fi
    command rm -f -- "$temp_file"
}
alias r=ranger_cd

function findoldfiles() {
    find "${1:-.}" -atime "+${2:-60}"
}

function findlinks() {
    find -L "${1:?no start dir}" -samefile "${2:?no file name}" 2>/dev/null
}

function findsoftlinks() {
    find -L "${1:?no start dir}" -xtype l -samefile "${2:?no file name}" 2>/dev/null
}

function findhardlinks() {
    find "${1:?no start dir}" -samefile "${2:?no file name}" 2>/dev/null
}

function f() {
    find . -maxdepth 1 -iname "*${1:?}*";
}

function ff() {
    find . -iname "*${1:?}*";
}

function fl() {
    find . -type f -exec grep -q "${1:?}" {} \; -print
}

function gf() {
    grep -iP "${@:?}" -R .
}

function gpdf() {
    pdfgrep -iP "${1:?}" -R "${2:-.}"
}

# launch quietly and disown
function lqd() {
    ( ${@:?} ) > /dev/null & disown
}

function lqqd() {
    ( $@ ) >& /dev/null & disown
}

function qo() {
    local FILE
    for FILE in $@; do
        lqd xdg-open $FILE
    done
}

function qqo() {
    local FILE
    for FILE in $@; do
        lqqd xdg-open $FILE
    done
}

# TODO: make this work with multiple pids
function output() {
    local PID=`pgrep "${1:?}"`
    tail -f "/proc/${PID:?not found}/fd/1" "/proc/$PID/fd/2"
}

# stolen from https://stackoverflow.com/a/3854444
function memusage() {
    if [ -z "${1:-}" ]; then
        echo "usage: memusage <process_name> [<type>]" 1>&2
        cat 1>&2 << EOF
    values for <type>:
        Rss: resident memory usage, all memory the process uses,
             including all memory this process shares with other processes.
             It does not include swap;
        Shared: memory that this process shares with other processes;
        Private: private memory used by this process,
             you can look for memory leaks here;
        Swap: swap memory used by the process;
        Pss: Proportional Set Size, a good overall memory indicator.
             It is the Rss adjusted for sharing:
             if a process has 1MiB private and 20MiB shared between other 10
             processes, Pss is 1 + 20/10 = 3MiB
EOF
        return 1
    fi
    local PIDS=( $(pgrep -x $1) )
    local PID
    for PID in "${PIDS[@]}"; do
        echo 0 $(awk "/${2:-Pss}/ {print \"+\", \$2}" "/proc/$PID/smaps") | bc
    done
}

function memusage_total() {
    memusage "$@" | paste -sd+ | bc
}

function fancy_unixtime() {
    local OLDF=""
     while true; do
         local SECS=`date +%s`
         local BASE="${1:-X}"
         local NEWF="$(figlet -W -f banner -tc $(printf "%$BASE\n" "$SECS"))"
         if [ ! "$OLDF" = "$NEWF" ]; then
             echo -n "\x1B[2J\x1B[0;0H"; #clear screen and move cursor to 0,0
             echo "$NEWF"
             OLDF="$NEWF"
         fi
         sleep 0.1
    done
}

function status() {
    echo '    failed system services:'
    systemctl --failed
    echo '    high priority log erros:'
    journalctl -p3 -xb
    echo '    smart status of /dev/sda or $1:'
    sudo smartctl --health "${1:-/dev/sda}"
    if hash pacman; then
        echo '    modified or missing files of installed packages:'
        pacman -Qkk 1>/dev/null
    fi
}

# go up n directories
# stolen from: https://www.reddit.com/r/ProgrammerHumor/comments/4f2o6l/typical_entrepreneurs/d25o3wu
function up() {
    cd $(eval printf '../'%.0s {1.."${1:?}"})
}

# follow symbolic link
function lcd() {
    if [ -f "$1" ]; then
        cd "${$(readlink -f ${1:?symlink unspecified})%/*}"
    elif [ -d "$1" ]; then
        cd "$(readlink -f ${1:?symlink unspecified})"
    fi
}

function weather() {
    local LOC=${1:-$(head -1 ~/.local/share/.location)}
    curl --insecure --silent "https://wttr.in/$LOC?q" #\
        # | grep -E '^\s*┌|│|└' --color=never
}

alias wttr=weather

function counttypes() {
    find ${*:-.} -type f -print0 | xargs -0 file --brief --mime | awk '
    {
        t[$0]++;
    }
    END {
        for (i in t) printf("%d\t%s\n", t[i], i);
    }' | sort -n
}

function brokenlinks() {
    find ${*:-.} -type l -print | perl -nle '-e || print'
}

function lpdf() {
    latexmk -pdf "${@:?missing file name}"
    latexmk -c
}

function llpdf() {
    latexmk -lualatex "${@:?missing file name}"
    latexmk -c
}

function xlpdf() {
    latexmk -xelatex "${@:?missing file name}"
    latexmk -c
}

function to_opus() {
    if [[ -z "${1:-}" ]]; then
        echo "usage: ${0} <file_to_convert> [<birtate>k]" 1>&2
        return 1
    fi
    local old_name="${1}"
    local new_name="${1%.*}.opus"
    local bitrate="${2:-128k}"
    echo "'${old_name}' -> '${new_name}' (bitrate: ${bitrate})"
    ffmpeg -i "${old_name}" -c:a libopus -b:a "${bitrate}" "${new_name}"
}

# make notify-send always work (e.g. when run as root)
# $1 needs to be either '--all' or a user id.
function _notify_send() {
    local extracted_uid bus_paths
    if [[ "$1" == '--all' ]]; then
        bus_paths=(/run/user/*/bus)
    else
        bus_paths=("/run/user/$1/bus")
    fi
    shift
    for bus in "${bus_paths[@]}"; do
        extracted_uid="${bus#*/user/}"
        extracted_uid="${extracted_uid%/bus*}"
        sudo -u "#$extracted_uid" DBUS_SESSION_BUS_ADDRESS="unix:path=$bus" notify-send "$@"
    done
}

function _alert_completion() {
    local start=$SECONDS how time_str bus notify_arg
    if [[ "$1" == "--only-me" ]]; then
        shift
        notify_arg=$(id --user)
    else
        notify_arg='--all'
    fi
    if "$@"; then
        how=completed
    else
        how=failed
    fi
    echo -ne '\a'  # bell for tmux
    time_str=$(displaytime $((SECONDS-start)))
    _notify_send "$notify_arg" "Task $how in $time_str" "$*"
}

# usually I'm the only user anyway...
alias alert_completion='_alert_completion'
# in case I'm not...
alias alert_completion_me='_alert_completion --only-me'


if [ -f ~/.local_zsh_aliases ]; then
    source ~/.local_zsh_aliases
fi
