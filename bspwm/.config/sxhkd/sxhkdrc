#
# wm independent hotkeys
#

# terminal emulator
super + Return
        st

super + shift + Return
        st -f 'Monaco:pixelsize=16'

super + ctrl + Return
        urxvt

# emacs
super + semicolon
        toemacs.sh

# lock screen
ctrl + alt + l
        exit.sh lock; xset dpms force off

# hack for "nested" modes
# MODE: xtended: (a)dj. ratio, (B)ash, (b)m, (c)alc, (m)an, (p)y, (r)anger, (s)crot, (t)erm, (w)allp, (x)dg, (z) corners, (n n) set volume, (s+[a-z]) switch [a-z]
# super + x
# MODE: toggles: (b)ar, (m)ouse, (g)aps, (s+[a-z]) move [a-z]
# super + shift + x

# note that this doesn't seem to work when using {n,p}
# MODE: wallpaper: (n)ext, (p)revious
super + x ; w : n
        set_wallpaper.sh

super + x ; w : p
        set_wallpaper.sh pop

# bookmarks
super + x ; b
        rofibookmarks.sh

# set volume to specific value
super + x ; {0-9} ; {0-9}
        pulse.sh set {0-9}{0-9}

# xdg-open
super + x ; x
        rofilocate.sh xdg

# open in terminal
super + x ; t
        rofilocate.sh term

# man page
super + x ; m
        rofiman.sh

# calculator
super + x ; c
        rofiinteractive.sh qalc

# ranger (using this because w3m images don't seem to work in stterm)
super + x ; r
        urxvt -e tmux new-session -A -s ranger ranger

# python
super + x ; p
        rofiinteractive.sh python

# bash
super + x ; shift + b
        rofiinteractive.sh bash

# center_window.sh
# MODE: move to corners: {h,j,k,l} -> {left,bottom,top,right}, {c,z} -> center
super + x ; z : h
        center_window.sh left
super + x ; z : j
        center_window.sh bottom
super + x ; z : k
        center_window.sh top
super + x ; z : l
        center_window.sh right
super + x ; z : z
        center_window.sh center
super + x ; z : c
        center_window.sh center

# MODE: adjust ratio: ctrl -> focused, else parent; 1-9
super + x ; a ; 1
        bspc node @parent -r 0.1
super + x ; a ; 2
        bspc node @parent -r 0.2
super + x ; a ; 3
        bspc node @parent -r 0.3
super + x ; a ; 4
        bspc node @parent -r 0.4
super + x ; a ; 5
        bspc node @parent -r 0.5
super + x ; a ; 6
        bspc node @parent -r 0.6
super + x ; a ; 7
        bspc node @parent -r 0.7
super + x ; a ; 8
        bspc node @parent -r 0.8
super + x ; a ; 9
        bspc node @parent -r 0.9

super + x ; a ; ctrl + 1
        bspc node focused -r 0.1
super + x ; a ; ctrl + 2
        bspc node focused -r 0.2
super + x ; a ; ctrl + 3
        bspc node focused -r 0.3
super + x ; a ; ctrl + 4
        bspc node focused -r 0.4
super + x ; a ; ctrl + 5
        bspc node focused -r 0.5
super + x ; a ; ctrl + 6
        bspc node focused -r 0.6
super + x ; a ; ctrl + 7
        bspc node focused -r 0.7
super + x ; a ; ctrl + 8
        bspc node focused -r 0.8
super + x ; a ; ctrl + 9
        bspc node focused -r 0.9

# scrot
# MODE: scrot: (w)indow, (e)verything, (s)election; shift -> 3s delay; ctrl -> copy to clipboard (nosave)
super + x ; s ; w
        screenshot.sh --action=window --show
super + x ; s ; e
        screenshot.sh --action=whole --show
super + x ; s ; s
        sleep 0.2; screenshot.sh --action=select --show
super + x ; s ; shift + w
        screenshot.sh --action=window --show --delay=3
super + x ; s ; shift + e
        screenshot.sh --action=whole --show --delay=3
super + x ; s ; shift + s
        sleep 3; screenshot.sh --action=select --show
super + x ; s ; ctrl + w
        screenshot.sh --action=window --clip --no-save --show
super + x ; s ; ctrl + e
        screenshot.sh --action=whole --clip --no-save --show
super + x ; s ; ctrl + s
        sleep 0.2; screenshot.sh --action=select --clip --no-save --show
super + x ; s ; ctrl + shift + w
        screenshot.sh --action=window --clip --delay=3 --no-save
super + x ; s ; ctrl + shift + e
        screenshot.sh --action=whole --clip --delay=3 --no-save
super + x ; s ; ctrl + shift + s
        sleep 3; screenshot.sh --action=select --clip --no-save

# access workspaces with one-letter names more quickly
super + x ; super + {a-z}
        bspwm_workspace.sh switch {a-z}

super + shift + x ; super + {a-z}
        bspwm_workspace.sh move {a-z}


Print
        screenshot.sh --action=whole

ctrl + Print
        sleep 0.2; screenshot.sh --action=select

shift + Print
        screenshot.sh --action=window

# fetch window
super + shift + v
        rofifetch.sh; bspwm_workspace.sh reset

# toggle polybar
super + shift + x ; b
        pgrep -x polybar && killall polybar && bspc config top_padding 0 \
        && bspc config bottom_padding 0 || launch_polybar.sh

# toggle gaps
super + shift + x ; g
        GAP=$(bspc config window_gap); \
        [ "$GAP" -ne 0 ] && GAP=0 || GAP=16; \
        bspc config window_gap "$GAP"

# toggle mouse
super + shift + x ; m
        mouse_action.sh toggle

# center focused floating window on screen
super + shift + z
        center_window.sh

# fcitx
~ctrl + alt + space
        pgrep -x fcitx || fcitx -d

# program launcher (rofi)
super + {_,alt +} space
        rofi -show {drun -show-icons,run}

# window list (rofi)
super + {_,shift +} g
        rofi -show {window,windowcd} -show-icons

# make sxhkd reload its configuration files:
super + Escape
        pkill -USR1 -x sxhkd

# scratchpad
super + e
        bspwm_scratchpad.sh terminal

super + shift + e
        bspwm_scratchpad.sh hide

super + u
        bspwm_scratchpad.sh unhide

super + shift + u
        bspwm_scratchpad.sh hide_floating

# exit.sh
# MODE: exit: (l)ock, (e) logout, (s)uspend, (r)eboot, (shift + s)hutdown, (h)ibernate, (ctrl + s) hybrid sleep
super + Pause; {l,e,s,r,shift + s,h,ctrl + s}
        exit.sh {lock,logout,suspend,reboot,shutdown,hibernate,hybrid_sleep}

Pause
        sleep 0.2; xset dpms force off

# volume
{XF86AudioRaiseVolume,XF86AudioLowerVolume}
        pulse.sh {up,down}

XF86AudioMute
        pulse.sh mute

Scroll_Lock
        pulse.sh mute

ctrl + {XF86AudioRaiseVolume,XF86AudioLowerVolume}
        pulse.sh {up,down} 1

super + {F12,F11}
        pulse.sh {up,down}

super + {Up,Down}
        pulse.sh {up,down}

super + ctrl + {Up,Down}
        pulse.sh {up,down} 1

super + ctrl + {F12,F11}
        pulse.sh {up,down} 1

super + shift + {F12,F11}
        pulse.sh force_{up,down}

super + F10
        pulse.sh mute

# center cursor
super + ctrl + z
        center_cursor.sh

# disable display
super + F9
        sleep 0.5; xset dpms force off

# power management
super + F4
        exit.sh hibernate

super + F1
        exit.sh suspend

# network management
super + F2
        nmcli radio wifi | grep enabled && nmcli radio wifi off \
        || nmcli radio wifi on

super + shift + F2
        nmcli networking | grep enabled && nmcli networking off \
        || nmcli networking on

# brightness
super + {plus,minus}
        light -N 0.5 && light -{A,U} 10

super + {F6,F5}
        light -N 0.5 && light -{A,U} 10

super + {button4,button5}
        light -N 0.5 && light -{A,U} 5

# surfraw
super + q
        rofisurfraw.sh both

#
# bspwm hotkeys
#

# close and kill
super + {shift,ctrl} + q
        bspc node -{c,k}

# alternate between the tiled and monocle layout
super + w
        bspc desktop -l next

super + ctrl + t
        bspc desktop -l tiled

super + ctrl + w
        bspc desktop -l monocle

# if the current node is automatic, send it to the last manual, otherwise pull the last leaf
super + shift + y
        bspc query -N -n focused.automatic && bspc node -n last.!automatic || bspc node last.leaf -n focused

# swap the current node and the biggest node
super + shift + b
        bspc node -s biggest.tiled.local

# toggle border
super + ctrl + shift + b
        bspc config border_width $(( ( $(bspc config border_width) + 1 ) % 6))

# change border width
super + ctrl + {button4,button5}
        BORDER=$(( $(bspc config border_width) {+,-} 1 )); \
        if [ "$BORDER" -le 0 ]; then \
            bspc config border_width  0; \
        else \
            bspc config border_width "$BORDER"; \
        fi

# change window gap
super + shift + {button4,button5}
        GAP=$(( $(bspc config window_gap) {+,-} 1 )); \
        if [ "$GAP" -le 0 ]; then \
            bspc config window_gap  0; \
        else \
            bspc config window_gap "$GAP"; \
        fi

# move desktops between monitors
super + {greater,less}
        bspwm_monitor.sh {next,prev}

#
# state/flags
#

# set the window state
super + {t,shift + t,s,f}
        bspc node -t {tiled,'~pseudo_tiled','~floating','~fullscreen'}

# for compatibility with my i3 config
super + shift + space
        bspc node -t '~floating'

# set the node flags
super + ctrl + {x,s,p}
        bspc node -g {locked,sticky,private}

#
# focus/swap
#

# focus the node in the given direction
super + {h,j,k,l}
        DIRECTIONS=( west south north east ); \
        ALTERNATIVE=( east north south west ); \
        INDEX={0,1,2,3}; \
        bspc node -f $\{DIRECTIONS[$INDEX]\} \
        || bspc node -f $\{ALTERNATIVE[$INDEX]\}

# swap the node in the given direction or resize floating node
super + shift + {h,j,k,l}
        ACTIONS11=(-20 0 0 20); \
        ACTIONS12=(0 20 -20 0); \
        ACTIONS2=(west south north east); \
        INDEX={0,1,2,3}; \
        bspc query -N -n .floating.focused.local.leaf && \
        bspc node -v $\{ACTIONS11[$INDEX]\} $\{ACTIONS12[$INDEX]\} || \
        bspc node -s "$\{ACTIONS2[$INDEX]\}"

# MODE: transplant node: h,j,k,l
super + z; {h,j,k,l}
        bspc node -n {west,south,north,east}

# focus the node for the given path jump
# a -> "ancestor" -> parent
super + {a,b,comma,period}
        bspc node -f @{parent,brother,first,second}

# sort of the opposite of super + a
super + shift + a
        bspc node -f @first

# focus the next/previous node in the current desktop
super + {_,shift + }r
        bspc node -{f,s} next.local

# switch between / focus floating nodes
alt + Tab
        bspc node prev.floating -f || bspc node -f prev.local

alt + shift + Tab
        bspc node next.floating -f || bspc node -f next.local

super + ctrl + space
         bspc query -N -n .floating.focused.local.leaf && \
            bspc node last.tiled.local.leaf -f \
            || bspc node last.floating.local.leaf -f


# focus the next/previous desktop on the current monitor
super + {p,n}
        bspc desktop -f {prev,next}.local && bspwm_workspace.sh reset

# move node to the next/previous desktop on the current monitor
super + shift + {p,n}
        bspc node -d {prev,next}.local

# focus next/previous desktop on any monitor
super + {_,ctrl} + m
        bspc desktop -f {next,prev} && bspwm_workspace.sh reset

# focus other monitor
super + alt + m
        bspc monitor -f next

# move node to next/previous desktop
super + shift + {_,ctrl} + m
        bspc node -d {next,prev}

# focus the older or newer node in the focus history
super + {o,i}
        bspc wm -h off; \
        bspc node {older,newer} -f; \
        bspc wm -h on

# focus the older or newer node in the focus history on current desktop
super + shift + {o,i}
        bspc wm -h off; \
        bspc node {older,newer}.local -f; \
        bspc wm -h on

# focus or send to the given desktop
super + {_,shift + }{1-9,0}
        bspwm_workspace.sh {switch,move} {1-9,10}

# create new numeric workspace / move node to new numeric workspace
super + {_, shift + }c
        bspwm_workspace.sh {switch,move}_new

# non-numeric workspaces
super {_,shift +} d
        bspwm_workspace.sh {switch,move}_rofi

# rename workspace
super + alt + r
        bspc desktop -n "$(rofi -i -p 'rename' -dmenu < /dev/null)"; \
        bspwm_workspace.sh reset

# focus or send to last focused desktop
super + {_, shift + } Tab
        bspc {desktop -f,node -d} last

#
# preselect
#

# preselect the direction
super + ctrl + {h,j,k,l}
        bspc node -p {west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
        bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + ctrl + c
        bspc node -p cancel

#
# move/resize
#

# expand a window by moving one of its side outward or make it smaller if
# this isn't possible
super + alt + {h,j,k,l}
        ACTION=('right -20 0' 'bottom 0 20' 'bottom 0 -20' 'right 20 0'); \
        ALTERNATIVE=('left -20 0' 'top 0 20' 'top 0 -20' 'left 20 0'); \
        INDEX={0,1,2,3}; \
        bspc node -z $\{ACTION[$INDEX]\} || bspc node -z $\{ALTERNATIVE[$INDEX]\}

# MODE: resize [shift,ctrl] {h,j,k,l}
super + shift + s : {h,j,k,l}
        ACTION=('right -10 0' 'bottom 0 10' 'bottom 0 -10' 'right 10 0'); \
        ALTERNATIVE=('left -10 0' 'top 0 10' 'top 0 -10' 'left 10 0'); \
        INDEX={0,1,2,3}; \
        bspc node -z $\{ACTION[$INDEX]\} || bspc node -z $\{ALTERNATIVE[$INDEX]\}

super + shift + s : shift + {h,j,k,l}
        ACTION=('right -100 0' 'bottom 0 100' 'bottom 0 -100' 'right 100 0'); \
        ALTERNATIVE=('left -100 0' 'top 0 100' 'top 0 -100' 'left 100 0'); \
        INDEX={0,1,2,3}; \
        bspc node -z $\{ACTION[$INDEX]\} || bspc node -z $\{ALTERNATIVE[$INDEX]\}

super + shift + s : ctrl + {h,j,k,l}
        ACTION=('right -1 0' 'bottom 0 1' 'bottom 0 -1' 'right 1 0'); \
        ALTERNATIVE=('left -1 0' 'top 0 1' 'top 0 -1' 'left 1 0'); \
        INDEX={0,1,2,3}; \
        bspc node -z $\{ACTION[$INDEX]\} || bspc node -z $\{ALTERNATIVE[$INDEX]\}

# contract a window by moving one of its side inward
super + alt + shift + {h,j,k,l}
        bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
super + shift + {Left,Down,Up,Right}
        bspc node -v {-50 0,0 50,0 -50,50 0}


#
# do strange stuff that i3 can't do
#
super + shift + f
        bspc query -N -n .leaf.focused.local && bspc node @/ --flip vertical || \
        bspc node --flip vertical

super + ctrl + f
        bspc query -N -n .leaf.focused.local && bspc node @/ --flip horizontal || \
        bspc node --flip horizontal

super + ctrl + r
        bspc query -N -n .leaf.focused.local && bspc node @/ --rotate 90 || \
        bspc node --rotate 90

super + shift + ctrl + r
        bspc query -N -n .leaf.focused.local && bspc node @/ --rotate 270 || \
        bspc node --rotate 270

super + ctrl + e
        bspc query -N -n .leaf.focused.local && bspc node @/ --equalize || \
        bspc node --equalize

super + ctrl + b
        bspc query -N -n .leaf.focused.local && bspc node @/ --balance || \
        bspc node --balance

# Local Variables:
# mode: conf
# End:
# vi: ft=conf
